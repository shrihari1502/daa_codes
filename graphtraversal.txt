import java.util.*;

class GraphTraversal {
    private int vertices;
    private LinkedList<Integer> adj[];

    GraphTraversal(int v) {
        vertices = v;
        adj = new LinkedList[v];
        for (int i = 0; i < v; ++i)
            adj[i] = new LinkedList<>();
    }

    void addEdge(int v, int w) {
        adj[v].add(w);
    }

    void BFS(int s) {
        boolean visited[] = new boolean[vertices];
        LinkedList<Integer> queue = new LinkedList<>();
        visited[s] = true;
        queue.add(s);

        while (queue.size() != 0) {
            s = queue.poll();
            System.out.print(s + " ");

            for (int n : adj[s]) {
                if (!visited[n]) {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }
    }

    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of vertices in the graph: ");
        int v = scanner.nextInt();

        GraphTraversal graph = new GraphTraversal(v);

        System.out.print("Enter the number of edges in the graph: ");
        int e = scanner.nextInt();

        System.out.println("Enter the edges (source and destination): ");
        for (int i = 0; i < e; i++) {
            int source = scanner.nextInt();
            int destination = scanner.nextInt();
            graph.addEdge(source, destination);
        }

        System.out.print("Enter the starting vertex for BFS: ");
        int startVertex = scanner.nextInt();

        System.out.println("Breadth First Traversal starting from vertex " + startVertex + ":");
        graph.BFS(startVertex);

        scanner.close();
    }
}
