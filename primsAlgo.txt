public class PrimsAlgo {
    private static final int V = 5;
    int minKey(int key[], Boolean mstSet[]) {
    	int min = Integer.MAX_VALUE,min_index=-1;
    	for(int i =0;i<V;i++) {
    		if(!mstSet[i] && key[i]< min) {
    			min = key[i];
    			min_index = i;
    		}
    	}
    	return min_index;
    }
    
    int primMST(int graph[][]) {
        int parent[] = new int[V];
        int key[] = new int[V];
        Boolean mstSet[] = new Boolean[V];
        
        for (int i = 0; i < V; i++) {
            key[i] = Integer.MAX_VALUE;
            mstSet[i] = false;
        }

        key[0] = 0;
        parent[0] = -1;
        
        for (int count = 0; count < V - 1; count++) {
            int u = minKey(key, mstSet);
            mstSet[u] = true;

            for (int v = 0; v < V; v++) {
                if (graph[u][v] != 0 && !mstSet[v] && graph[u][v] < key[v]) {
                    parent[v] = u;
                    key[v] = graph[u][v];
                }
            }
        }

        int mst_weight = 0;
        for (int i = 1; i < V; i++) {
            mst_weight += graph[i][parent[i]];
        }
        return mst_weight;
    }

    public static void main(String[] args) {
        PrimsAlgo t = new PrimsAlgo();
        int graph[][] = new int[][] {
            { 0, 3, 0, 4, 0 },
            { 8, 0, 3, 8, 5 },
            { 0, 65, 0, 0, 7 },
            { 61, 8, 0, 0, 9 },
            { 0, 15, 74, 9, 0 }
        };
        
        int mstWeight = t.primMST(graph);
        System.out.println("The length of the Minimum Spanning Tree is: " + mstWeight);
    }
}
