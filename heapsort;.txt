import java.util.*;

public class HeapSort {
	
	public static void buildMaxHeap(int arr[], int n, int i) {
        int Max = i;                                 // Initialize Max as root
        int LChild = 2 * i + 1;                            // LChild child
        int RChild = 2 * i + 2;                           // RChild child

      
        if (LChild < n && arr[LChild] > arr[Max]) {
            Max = LChild;
        }

        // If RChild child is larger than Max so far
        if (RChild < n && arr[RChild] > arr[Max]) {
            Max = RChild;
        }

        // If Max is not root
        if (Max != i) {
            int temp = arr[i];
            arr[i] = arr[Max];
            arr[Max] = temp;

            // Recursively build the max heap from the affected subtree
            buildMaxHeap(arr, n, Max);
        }
    }

    public static void heapSort(int arr[]) {
        int n = arr.length;

        // Build a max heap
        for (int i = n / 2 - 1; i >= 0; i--) {
            buildMaxHeap(arr, n, i);
        }

        // One by one extract elements from heap
        for (int i = n - 1; i > 0; i--) {
            // Move current root to end (temp)
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            // call buildMaxHeap on the reduced heap
            buildMaxHeap(arr, i, 0);
        }
    }
 

    public static void main(String[] args) {
        int[] array = {5,1,4,9,6,12,45,13,27,21,68};
        System.out.println("Array before sorting:");
        System.out.println(Arrays.toString(array));

        HeapSort ob = new HeapSort();
        ob.heapSort(array);

        System.out.println("Array after sorting:");
        System.out.println(Arrays.toString(array));
    }
}
